pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'container'  // Name of your image (could be your Docker Hub repo name)
        DOCKER_TAG = 'latest'        // Tag for your image
        DOCKER_HUB_CREDENTIALS_ID = 'afa566aa-e99b-4a3c-b118-e4f72f1fd4ea' // Jenkins credentials ID for Docker Hub login
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone the GitHub repository (replace with your actual repo URL)
                git url: 'https://github.com/mernathawyy/our-project', branch: 'main'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image using the Dockerfile in the repo
                    sh 'docker build -f Dockerfile -t $DOCKER_IMAGE_NAME:$DOCKER_TAG .'
                }
            }
        }

        stage('Test Docker Image') {
            steps {
                script {
                    // Run the Docker container from the built image and test it
                    sh 'docker run -d -p 8000:8000 --name myapp-container $DOCKER_IMAGE_NAME:$DOCKER_TAG'
                    sh 'sleep 5'  // wait for the container to start

                    // Example test: check if the application is accessible
                    sh 'curl --fail http://localhost:8000 || exit 1'
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    // Log in to Docker Hub using Jenkins credentials
                    withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin"
                    }

                    // Tag the image for Docker Hub
                    sh 'docker tag $DOCKER_IMAGE_NAME:$DOCKER_TAG $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:$DOCKER_TAG'

                    // Push the Docker image to Docker Hub
                    sh 'docker push $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:$DOCKER_TAG'
                }
            }
        }
    }

    post {
        always {
            // Cleanup: Remove the container if it was created
            sh 'docker rm -f $(docker ps -aq)' // Remove all containers (you can modify this to remove only specific containers)
        }

        success {
            echo 'Docker image successfully built and pushed to Docker Hub.'
        }

        failure {
            echo 'Pipeline failed. Check the logs for errors.'
        }
    }
}
